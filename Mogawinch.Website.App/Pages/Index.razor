@page "/"
@using Mogawinch.Models
@using System.IO
@using System.Text.Json

@inject IJSRuntime JS
@inject HttpClient Http
@inject NavigationManager NavManager

<div id="home">
    @if (Reviews == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        @if (Reviews.Count() > 0)
        {
            var first = Reviews.First();

            <ReviewOverview ImagePath="@first.ImagePath"
                            Title="@first.Title"
                            Author="@first.Author"
                            Date="@first.Date"
                            Excerpt="@first.Excerpt"
                            IsFeatured="true"
                            ReviewScore="@first.ReviewScore"
                            OnClickCallback="() => NavigateToReview(first.Path)" />
        }
        <h2 class="review-title">Featured Reviews</h2>
        <div class="review-grid">
            @foreach (var review in Reviews.Skip(1))
            {
                <ReviewOverview ImagePath="@review.ImagePath"
                                Title="@review.Title"
                                Author="@review.Author"
                                Date="@review.Date"
                                Excerpt="@review.Excerpt"
                                IsFeatured="false"
                                OnClickCallback="() => NavigateToReview(review.Path)" />
            }
        </div>
    }
</div>

@code {
    private Article[] Reviews;

    protected override async Task OnInitializedAsync()
    {
        var reviewList = new List<Article>();

        try
        {
            var indexes = await GetFromJsonAsync<ContentIndex[]>("content/index.json");
            await JS.InvokeVoidAsync("console.log", $"paths are {indexes.Count()}");

            foreach (var index in indexes.Take(7))
            {
                var reviewData = await GetFromJsonAsync<Article>(index.Path);
                reviewData.Path = index.Path;
                await JS.InvokeVoidAsync("console.log", $"review data is {reviewData.Path}");

                reviewList.Add(reviewData);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("console.log", $"review loading crashed with error {ex.Message}.");
        }
        finally
        {
            Reviews = reviewList.ToArray();
        }
    }

    public async Task<T> GetFromJsonAsync<T>(string requestUri)
    {
        using (var response = await Http.GetAsync(requestUri, HttpCompletionOption.ResponseHeadersRead))
        {
            var jsonResult = await response.Content.ReadFromJsonAsync<T>();

            return jsonResult;
        }
    }

    private void NavigateToReview(string path)
    {
        NavManager.NavigateTo($"/reviews/games/{Uri.EscapeDataString(path)}");
    }
}